<!DOCTYPE html>
<html>
<head>
    <title>Gmail Analyzer</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/images/email.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/images/email.png">
    <link rel="shortcut icon" href="/images/email.png">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        header {
            background-color: #0077b5; /* LinkedIn blue */
            color: white;
            padding: 20px;
            text-align: center;
        }

        h1 {
            margin: 0;
        }

        main {
            padding: 20px;
            max-width: 960px; /* or any other suitable width */
            margin: 0 auto; /* This centers the main content horizontally */
        }

        section {
            background-color: white;
            margin-bottom: 20px;
            padding: 20px;
            border-radius: 5px;
        }

        section h2 {
            margin-top: 0;
        }

        button {
            background-color: #0077b5;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #005f8c;
        }

        button:disabled {
            cursor: not-allowed;
        }

        #chart-placeholder {
            text-align: center;
            margin-top: 20px;
        }

        #chart-placeholder img {
            max-width: 100%;
            height: auto;
            border: 1px solid #ccc;
        }

        footer {
            background-color: #333;
            color: white;
            text-align: center;
            padding: 10px;
        }

        footer a {
            color: #0077b5;
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }

        .border-container {
            border: 1px solid black;
        }

        #authentication {
            text-align: left;
        }

        #progress-bar {
            width: 100%;
            height: 20px;
            display: none;
            margin-top: 10px;
            -webkit-appearance: none;
            appearance: none;
            border: 1px black solid;
        }

        #progress-bar::-webkit-progress-bar {
            background-color: #f4f4f4; /* Background color for the progress bar container */
            border-radius: 5px;
        }

        #progress-bar::-webkit-progress-value {
            background-color: #0077b5; /* LinkedIn blue for the progress value */
            border-radius: 5px;
        }

        #progress-bar::-moz-progress-bar {
            background-color: #09F7A5; /* LinkedIn blue for Firefox */
            border-radius: 5px;
        }

        .progress-data {
            margin-top: 15px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
            display: none;
        }

        .progress-data h3 {
            margin-top: 0;
        }

        .progress-data div {
            /*display: flex;*/
            /*justify-content: flex-start; !* This will place content at either end of the container *!*/
            /*gap: 10px; !* Adjusts space between items in flex container *!*/
        }

        .progress-data div .label {
            font-weight: bold;
        }

        .tracking-controls {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .chart-control {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            background-color: white;
        }

        #chart-container {
            background-color: white;
            padding: 10px;
            border-radius: 5px;
            min-height: 200px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

    </style>
</head>
<body>
<main>
    <section id="authentication" class="border-container">
        <h2>Gmail Authentication</h2>
        <p>Authenticate with your Gmail account to start tracking your LinkedIn job applications.</p>
        <% if (!authenticated) { %>
            <button id="auth-button" onclick="window.location.href='/auth/gmail'">Authenticate with Gmail</button>
        <% } else { %>
            <p style="color: green;">Authenticated with Gmail!</p>
        <% } %>
    </section>

    <section id="fetch-emails" class="border-container">
        <h2>Fetch Emails</h2>
        <div id="last-fetch-info"
             style="margin-bottom: 15px; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
            <h3 style="margin-top: 0;">Last Fetch Information</h3>
            <div><strong>Last Fetch:</strong> <span id="last-fetch-time">Never</span></div>
            <div><strong>Emails Found:</strong> <span id="last-fetch-count">0</span></div>
        </div>
        <p>After authentication, fetch your latest job application emails.</p>
        <button id="fetch-button"
                onclick="fetchEmails()"
                <% if (!authenticated) { %>disabled style="background-color: grey; cursor: not-allowed;"
                <% } %>
        >
            Fetch Emails
        </button>
        <progress id="progress-bar" value="0" max="100"></progress>

        <div class="progress-data">
            <h3 style="margin-top: 0;">Processing Statistics</h3>
            <div class="single-metric"><b class="metric-key">Start Time:</b> <span id="fetch-start-time">Not started</span></div>
            <div class="single-metric"><b class="metric-key">Elapsed Time:</b> <span id="fetch-elapsed-time">0:00</span></div>
            <div class="single-metric"><b class="metric-key">Progress:</b> <span id="emails-processed">0</span>/<span
                        id="total-emails">0</span></div>
            <div class="single-metric"><b class="metric-key">Speed:</b> <span id="current-speed">0</span> emails/sec</div>
            <div class="single-metric"><b class="metric-key">Remaining:</b> <span id="remaining-emails">0</span> emails</div>
            <div class="single-metric"><b class="metric-key">ETA:</b> <span id="eta">Calculating...</span></div>
        </div>

        <% if (!authenticated) { %>
            <p style="color: red;">Please authenticate first to fetch your emails.</p>
        <% } %>
    </section>

    <section id="application-tracking" class="border-container">
        <h2>Application Tracking</h2>
        <p>View your job application statistics over time.</p>
        <div class="tracking-controls">
            <button id="generate-chart-button" onclick="generateApplicationChart()"
                    <% if (!authenticated) { %>disabled style="background-color: grey; cursor: not-allowed;"
                    <% } %>
            >
                Generate Application Chart
            </button>
            <select id="view-type" class="chart-control">
                <option value="day">Daily View</option>
                <option value="week" selected>Weekly View</option>
                <option value="month">Monthly View</option>
                <option value="quarter">Quarterly View</option>
                <option value="year">Yearly View</option>
            </select>
        </div>
        <div id="chart-container">
            <img id="chart-image" src="" alt="Application Chart"
                 style="display: none; max-width: 100%; margin-top: 20px;">
        </div>
    </section>
</main>
<footer>
    <p>Developed by <a href="https://mateusb12.github.io/mateus_portfolio/">Mateus</a></p>
</footer>
<script>
    let fetchStartTime = null;
    let fetchUpdateInterval = null;

    function updateElapsedTime() {
        if (!fetchStartTime) return;

        const now = new Date();
        const elapsed = Math.floor((now - fetchStartTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;

        document.getElementById('fetch-elapsed-time').textContent =
            `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    async function updateLastFetchInfo() {
        try {
            const response = await fetch('/fetch-metadata');
            const metadata = await response.json();

            const lastFetchTimeEl = document.getElementById('last-fetch-time');
            const lastFetchCountEl = document.getElementById('last-fetch-count');

            if (metadata.lastFetchTime) {
                const date = new Date(metadata.lastFetchTime);
                lastFetchTimeEl.textContent = date.toLocaleString();
                lastFetchCountEl.textContent = metadata.emailsFetched;
            } else {
                lastFetchTimeEl.textContent = 'Never';
                lastFetchCountEl.textContent = '0';
            }
        } catch (error) {
            console.error('Error fetching metadata:', error);
        }
    }

    function fetchEmails() {
        document.querySelector('.progress-data').style.display = 'block';
        const progressBar = document.getElementById('progress-bar');
        const fetchButton = document.getElementById('fetch-button');
        const emailsProcessed = document.getElementById('emails-processed');
        const totalEmails = document.getElementById('total-emails');
        const currentSpeed = document.getElementById('current-speed');
        const remainingEmails = document.getElementById('remaining-emails');
        const eta = document.getElementById('eta');

        // Reset and start metadata tracking
        fetchStartTime = new Date();
        document.getElementById('fetch-start-time').textContent = fetchStartTime.toLocaleTimeString();

        if (fetchUpdateInterval) {
            clearInterval(fetchUpdateInterval);
        }
        fetchUpdateInterval = setInterval(updateElapsedTime, 1000);

        progressBar.style.display = 'block';
        fetchButton.disabled = true;
        fetchButton.style.backgroundColor = 'grey';

        const eventSource = new EventSource('/fetch_emails');

        eventSource.onmessage = function (e) {
            try {
                const data = JSON.parse(e.data);

                if (data.emails_processed !== undefined && data.total_emails !== undefined) {
                    const processed = data.emails_processed;
                    const total = data.total_emails;
                    const percentage = (processed / total) * 100;
                    progressBar.value = percentage;

                    // Update both progress data and metadata
                    emailsProcessed.textContent = processed;
                    totalEmails.textContent = total;
                    currentSpeed.textContent = data.current_speed ? data.current_speed.toFixed(2) : '0';
                    remainingEmails.textContent = data.remaining_emails || '0';

                    // Update metadata display
                    updateLastFetchInfo();
                }

                if (data.message === "Email fetching completed.") {
                    eventSource.close();
                    fetchButton.disabled = false;
                    fetchButton.style.backgroundColor = '#0077b5';
                    clearInterval(fetchUpdateInterval);
                    alert('Emails fetched successfully!');
                }

                if (data.error) {
                    console.error(data.error);
                    alert(`Error: ${data.error}`);
                    eventSource.close();
                    fetchButton.disabled = false;
                    fetchButton.style.backgroundColor = '#0077b5';
                }
            } catch (error) {
                console.error('Error parsing data:', error);
            }
        };

        eventSource.onerror = function (e) {
            console.error('EventSource failed.', e);
            eventSource.close();
            fetchButton.disabled = false;
            fetchButton.style.backgroundColor = '#0077b5';
            clearInterval(fetchUpdateInterval);
            alert('An error occurred while fetching emails.');
        };
    }

    async function generateApplicationChart() {
        const button = document.getElementById('generate-chart-button');
        const chartImage = document.getElementById('chart-image');
        const viewType = document.getElementById('view-type').value;

        button.disabled = true;
        button.style.backgroundColor = 'grey';

        try {
            const response = await fetch('/generate-application-chart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({viewType}),
            });

            if (!response.ok) {
                throw new Error('Failed to generate chart');
            }

            // Force browser to load new image by adding timestamp
            const timestamp = new Date().getTime();
            chartImage.src = `/applications_chart.png?t=${timestamp}`;
            chartImage.style.display = 'block';
        } catch (error) {
            console.error('Error generating chart:', error);
            alert('Error generating application chart');
        } finally {
            button.disabled = false;
            button.style.backgroundColor = '#0077b5';
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateLastFetchInfo();
    });
</script>
</body>
</html>