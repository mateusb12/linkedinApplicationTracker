<!DOCTYPE html>
<html>
<head>
    <title>Gmail Analyzer</title>
<!--    <link rel="icon" type="image/png" href="/favicon-image">-->
    <link rel="icon" type="image/png" href="/images/email.png">
    <link rel="shortcut icon" href="/images/email.png" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        header {
            background-color: #0077b5; /* LinkedIn blue */
            color: white;
            padding: 20px;
            text-align: center;
        }

        h1 {
            margin: 0;
        }

        main {
            padding: 20px;
            max-width: 960px; /* or any other suitable width */
            margin: 0 auto; /* This centers the main content horizontally */
        }

        section {
            background-color: white;
            margin-bottom: 20px;
            padding: 20px;
            border-radius: 5px;
        }

        section h2 {
            margin-top: 0;
        }

        button {
            background-color: #0077b5;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #005f8c;
        }

        button:disabled {
            cursor: not-allowed;
        }

        #chart-placeholder {
            text-align: center;
            margin-top: 20px;
        }

        #chart-placeholder img {
            max-width: 100%;
            height: auto;
            border: 1px solid #ccc;
        }

        footer {
            background-color: #333;
            color: white;
            text-align: center;
            padding: 10px;
        }

        footer a {
            color: #0077b5;
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }

        .border-container {
            border: 1px solid black;
        }

        #authentication {
            text-align: left;
        }

        #progress-bar {
            width: 100%;
            height: 20px;
            display: none;
            margin-top: 10px;
            -webkit-appearance: none;
            appearance: none;
            border: 1px black solid;
        }

        #progress-bar::-webkit-progress-bar {
            background-color: #f4f4f4; /* Background color for the progress bar container */
            border-radius: 5px;
        }

        #progress-bar::-webkit-progress-value {
            background-color: #0077b5; /* LinkedIn blue for the progress value */
            border-radius: 5px;
        }

        #progress-bar::-moz-progress-bar {
            background-color: #09F7A5; /* LinkedIn blue for Firefox */
            border-radius: 5px;
        }

        .progress-data {
            margin-top: 15px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
            display: none;
        }

        .progress-data h3 {
            margin-top: 0;
        }

        .progress-data div {
            /*display: flex;*/
            /*justify-content: flex-start; !* This will place content at either end of the container *!*/
            /*gap: 10px; !* Adjusts space between items in flex container *!*/
        }

        .progress-data div .label {
            font-weight: bold;
        }

        .tracking-controls {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .chart-control {
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            background-color: white;
        }

        #chart-container {
            background-color: white;
            padding: 10px;
            border-radius: 5px;
            min-height: 200px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .auth-btn, .logout-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .auth-btn {
            background-color: #0077b5;
            color: white;
        }

        .auth-btn:hover {
            background-color: #005f8c;
            transform: translateY(-2px);
        }

        .logout-btn {
            background-color: #dc3545;
            color: white;
        }

        .logout-btn:hover {
            background-color: #c82333;
            transform: translateY(-2px);
        }

        .auth-status {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        /* Add loading spinner */
        .loading {
            position: relative;
            opacity: 0.7;
            pointer-events: none;
        }

        .loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin: -10px 0 0 -10px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .auth-message {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .auth-message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .auth-message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .auth-message i {
            font-size: 1.2em;
        }

    </style>
</head>
<body>
<main>
    <section id="authentication" class="border-container">
        <h2>Gmail Authentication</h2>
        <p>Authenticate with your Gmail account to start tracking your LinkedIn job applications.</p>
        <div id="auth-content">
            <!-- This div will be populated by JavaScript -->
            <div class="loading-spinner"></div>
        </div>
    </section>

    <section id="fetch-emails" class="border-container">
        <h2>Fetch Emails</h2>
        <div id="last-fetch-info"
             style="margin-bottom: 15px; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
            <h3 style="margin-top: 0;">Last Fetch Information</h3>
            <div><strong>Last Fetch:</strong> <span id="last-fetch-time">Never</span></div>
            <div><strong>Emails Found:</strong> <span id="last-fetch-count">0</span></div>
        </div>
        <p>After authentication, fetch your latest job application emails.</p>
        <div class="tracking-controls">
            <select id="fetch-amount" class="chart-control">
                <option value="50">Last 50 emails</option>
                <option value="100" selected>Last 100 emails</option>
                <option value="250">Last 250 emails</option>
                <option value="500">Last 500 emails</option>
                <option value="1000">Last 1000 emails</option>
                <option value="all">All emails</option>
            </select>
            <button id="fetch-button"
                    onclick="fetchEmails()"
                    <% if (!authenticated) { %>disabled style="background-color: grey; cursor: not-allowed;"<% } %>
            >
                Fetch Emails
            </button>
            <button id="stop-fetch-button" 
                    onclick="stopFetch()" 
                    style="background-color: #dc3545; display: none;">
                Stop Fetch
            </button>
        </div>
        <progress id="progress-bar" value="0" max="100"></progress>

        <div class="progress-data">
            <h3 style="margin-top: 0;">Processing Statistics</h3>
            <div class="single-metric"><b class="metric-key">Start Time:</b> <span id="fetch-start-time">Not started</span></div>
            <div class="single-metric"><b class="metric-key">Elapsed Time:</b> <span id="fetch-elapsed-time">0:00</span></div>
            <div class="single-metric"><b class="metric-key">Progress:</b> <span id="emails-processed">0</span>/<span
                        id="total-emails">0</span></div>
            <div class="single-metric"><b class="metric-key">Speed:</b> <span id="current-speed">0</span> emails/sec</div>
            <div class="single-metric"><b class="metric-key">Remaining:</b> <span id="remaining-emails">0</span> emails</div>
            <div class="single-metric"><b class="metric-key">ETA:</b> <span id="eta">Calculating...</span></div>
        </div>

        <% if (!authenticated) { %>
            <p style="color: red;">Please authenticate first to fetch your emails.</p>
        <% } %>
    </section>

    <section id="application-tracking" class="border-container">
        <h2>Application Tracking</h2>
        <p>View your job application statistics over time.</p>
        <div class="tracking-controls">
            <button id="generate-chart-button" onclick="generateApplicationChart()"
                    <% if (!authenticated) { %>disabled style="background-color: grey; cursor: not-allowed;"
                    <% } %>
            >
                Generate Application Chart
            </button>
            <select id="view-type" class="chart-control">
                <option value="day">Daily View</option>
                <option value="week" selected>Weekly View</option>
                <option value="month">Monthly View</option>
                <option value="quarter">Quarterly View</option>
                <option value="year">Yearly View</option>
            </select>
        </div>
        <div id="chart-container">
            <img id="chart-image" src="" alt="Application Chart"
                 style="display: none; max-width: 100%; margin-top: 20px;">
        </div>
    </section>
</main>
<footer>
    <p>Developed by <a href="https://mateusb12.github.io/mateus_portfolio/">Mateus</a></p>
</footer>
<script>
    // Add this function to check authentication status
    async function checkAuthStatus() {
        console.log('Checking auth status...');
        const storedTokens = localStorage.getItem('gmail_tokens');
        const authSection = document.getElementById('authentication');
        const fetchButton = document.getElementById('fetch-button');
        const generateChartButton = document.getElementById('generate-chart-button');

        if (!storedTokens) {
            console.log('No tokens found, showing unauthenticated state');
            // Not authenticated state
            authSection.innerHTML = `
                <h2>Gmail Authentication</h2>
                <p>Authenticate with your Gmail account to start tracking your LinkedIn job applications.</p>
                <button id="auth-button" onclick="window.location.href='/auth/gmail'" class="auth-btn">
                    <i class="fab fa-google"></i>
                    Authenticate with Gmail
                </button>
            `;
            
            if (fetchButton) {
                fetchButton.disabled = true;
                fetchButton.style.backgroundColor = 'grey';
                fetchButton.style.cursor = 'not-allowed';
            }
            if (generateChartButton) {
                generateChartButton.disabled = true;
                generateChartButton.style.backgroundColor = 'grey';
                generateChartButton.style.cursor = 'not-allowed';
            }
            return;
        }

        try {
            console.log('Verifying authentication with server...');
            const response = await fetch('/verify-auth');
            const data = await response.json();

            if (!response.ok || !data.authenticated) {
                console.log('Authentication invalid, clearing tokens');
                localStorage.removeItem('gmail_tokens');
                checkAuthStatus();
                return;
            }

            console.log('Authentication valid, updating UI');
            // Valid authentication state
            authSection.innerHTML = `
                <h2>Gmail Authentication</h2>
                <p>Authenticate with your Gmail account to start tracking your LinkedIn job applications.</p>
                <div class="auth-status">
                    <p style="color: green; margin-bottom: 10px;">
                        <i class="fas fa-check-circle"></i> Successfully authenticated with Gmail
                    </p>
                    <button onclick="handleLogout()" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                </div>
            `;
            
            if (fetchButton) {
                fetchButton.disabled = false;
                fetchButton.style.backgroundColor = '#0077b5';
                fetchButton.style.cursor = 'pointer';
            }
            if (generateChartButton) {
                generateChartButton.disabled = false;
                generateChartButton.style.backgroundColor = '#0077b5';
                generateChartButton.style.cursor = 'pointer';
            }
        } catch (error) {
            console.error('Error checking auth status:', error);
            localStorage.removeItem('gmail_tokens');
            checkAuthStatus();
        }
    }

    // Update the DOMContentLoaded event listener
    document.addEventListener('DOMContentLoaded', async () => {
        console.log('Page loaded, checking authentication status...');
        
        try {
            const storedTokens = localStorage.getItem('gmail_tokens');
            console.log('Raw stored tokens:', storedTokens);

            if (!storedTokens) {
                console.log('No stored tokens found, showing login state');
                updateAuthUI(false);
                return;
            }

            try {
                const tokens = JSON.parse(storedTokens);
                console.log('Parsed tokens:', {
                    access_token: tokens.access_token ? 'exists' : 'missing',
                    refresh_token: tokens.refresh_token ? 'exists' : 'missing',
                    scope: tokens.scope,
                    token_type: tokens.token_type,
                    expiry_date: tokens.expiry_date
                });
                
                console.log('Sending tokens to server...');
                const response = await fetch('/set-tokens', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: storedTokens  // Send the raw stored tokens string
                });

                if (!response.ok) {
                    const data = await response.json();
                    throw new Error(data.error || 'Failed to set tokens');
                }

                console.log('Tokens set successfully on server');
                updateAuthUI(true);
                await updateLastFetchInfo();
            } catch (error) {
                console.error('Error during token setup:', error);
                localStorage.removeItem('gmail_tokens');
                updateAuthUI(false);
            }
        } catch (error) {
            console.error('Error in initialization:', error);
            updateAuthUI(false);
        }
    });

    async function handleLogout() {
        const logoutBtn = document.querySelector('.logout-btn');
        logoutBtn.classList.add('loading');
        
        try {
            const storedTokens = JSON.parse(localStorage.getItem('gmail_tokens'));
            if (!storedTokens) {
                throw new Error('No tokens found');
            }

            // First, revoke the token on Google's end
            const response = await fetch('/revoke', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ tokens: storedTokens })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error || 'Failed to revoke access');
            }
            
            // Clear local storage
            localStorage.removeItem('gmail_tokens');
            
            // Show feedback to user
            const authSection = document.getElementById('authentication');
            authSection.innerHTML = `
                <h2>Gmail Authentication</h2>
                <p>Authenticate with your Gmail account to start tracking your LinkedIn job applications.</p>
                <div class="auth-message success">
                    <i class="fas fa-check-circle"></i>
                    Successfully logged out!
                </div>
                <button id="auth-button" onclick="window.location.href='/auth/gmail'" class="auth-btn">
                    <i class="fab fa-google"></i>
                    Authenticate with Gmail
                </button>
            `;
            
            // Disable fetch and chart buttons
            const fetchButton = document.getElementById('fetch-button');
            const generateChartButton = document.getElementById('generate-chart-button');
            if (fetchButton) {
                fetchButton.disabled = true;
                fetchButton.style.backgroundColor = 'grey';
                fetchButton.style.cursor = 'not-allowed';
            }
            if (generateChartButton) {
                generateChartButton.disabled = true;
                generateChartButton.style.backgroundColor = 'grey';
                generateChartButton.style.cursor = 'not-allowed';
            }

            // Reload the page after a short delay to ensure everything is reset
            setTimeout(() => {
                window.location.reload();
            }, 1500);
            
        } catch (error) {
            console.error('Logout error:', error);
            const authSection = document.getElementById('authentication');
            const errorDiv = document.createElement('div');
            errorDiv.className = 'auth-message error';
            errorDiv.innerHTML = `
                <i class="fas fa-exclamation-circle"></i>
                Error during logout: ${error.message}
            `;
            authSection.appendChild(errorDiv);
        } finally {
            logoutBtn.classList.remove('loading');
        }
    }

    let fetchStartTime = null;
    let fetchUpdateInterval = null;
    let eventSource = null;

    function updateElapsedTime() {
        if (!fetchStartTime) return;

        const now = new Date();
        const elapsed = Math.floor((now - fetchStartTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;

        document.getElementById('fetch-elapsed-time').textContent =
            `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    async function updateLastFetchInfo() {
        try {
            const response = await fetch('/fetch-metadata');
            const metadata = await response.json();

            const lastFetchTimeEl = document.getElementById('last-fetch-time');
            const lastFetchCountEl = document.getElementById('last-fetch-count');

            if (metadata.lastFetchTime) {
                const date = new Date(metadata.lastFetchTime);
                const options = {
                    day: '2-digit',
                    month: 'short',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: false
                };
                lastFetchTimeEl.textContent = date.toLocaleString('en-GB', options)
                    .replace(/(\d{2}) ([A-Za-z]{3}) /, '$1/$2/');
                lastFetchCountEl.textContent = metadata.emailsFetched;
            } else {
                lastFetchTimeEl.textContent = 'Never';
                lastFetchCountEl.textContent = '0';
            }
        } catch (error) {
            console.error('Error fetching metadata:', error);
        }
    }

    function stopFetch() {
        if (eventSource) {
            eventSource.close();
            resetFetchUI();
            alert('Email fetching stopped by user.');
        }
    }

    function resetFetchUI() {
        const fetchButton = document.getElementById('fetch-button');
        const stopFetchButton = document.getElementById('stop-fetch-button');
        
        fetchButton.disabled = false;
        fetchButton.style.backgroundColor = '#0077b5';
        stopFetchButton.style.display = 'none';
        clearInterval(fetchUpdateInterval);
    }

    function fetchEmails() {
        const fetchAmount = document.getElementById('fetch-amount').value;
        document.querySelector('.progress-data').style.display = 'block';
        const progressBar = document.getElementById('progress-bar');
        const fetchButton = document.getElementById('fetch-button');
        const stopFetchButton = document.getElementById('stop-fetch-button');
        const emailsProcessed = document.getElementById('emails-processed');
        const totalEmails = document.getElementById('total-emails');
        const currentSpeed = document.getElementById('current-speed');
        const remainingEmails = document.getElementById('remaining-emails');
        const eta = document.getElementById('eta');

        // Reset and show progress elements
        progressBar.value = 0;
        emailsProcessed.textContent = '0';
        totalEmails.textContent = '0';
        currentSpeed.textContent = '0';
        remainingEmails.textContent = '0';
        eta.textContent = 'Calculating...';

        // Reset and start metadata tracking
        fetchStartTime = new Date();
        document.getElementById('fetch-start-time').textContent = fetchStartTime.toLocaleTimeString('en-GB', { hour12: false });

        if (fetchUpdateInterval) {
            clearInterval(fetchUpdateInterval);
        }
        fetchUpdateInterval = setInterval(updateElapsedTime, 1000);

        progressBar.style.display = 'block';
        fetchButton.disabled = true;
        fetchButton.style.backgroundColor = 'grey';
        stopFetchButton.style.display = 'inline-block';

        eventSource = new EventSource(`/fetch_emails?amount=${fetchAmount}`);

        let lastUpdate = Date.now();
        let lastProcessed = 0;

        eventSource.onmessage = function (e) {
            try {
                const data = JSON.parse(e.data);

                if (data.emails_processed !== undefined && data.total_emails !== undefined) {
                    const processed = data.emails_processed;
                    const total = data.total_emails;
                    console.log(`Processed: ${processed}, Total: ${total}`);
                    
                    const percentage = (processed / total) * 100;
                    
                    // Update progress bar and counts
                    progressBar.value = percentage;
                    emailsProcessed.textContent = processed;
                    totalEmails.textContent = total;
                    
                    // Calculate speed
                    const now = Date.now();
                    const timeDiff = (now - lastUpdate) / 1000; // Convert to seconds
                    const emailsDiff = processed - lastProcessed;
                    if (timeDiff > 0) {
                        const speed = emailsDiff / timeDiff;
                        currentSpeed.textContent = speed.toFixed(2);
                        
                        // Calculate remaining emails and ETA
                        const remaining = total - processed;
                        remainingEmails.textContent = remaining;
                        
                        if (speed > 0) {
                            const etaSeconds = remaining / speed;
                            const etaTimestamp = formatCurrentTimePlusSeconds(etaSeconds);
                            eta.textContent = etaTimestamp;
                        }
                    }
                    
                    lastUpdate = now;
                    lastProcessed = processed;

                    // Update metadata display
                    updateLastFetchInfo();
                }

                if (data.message === "Email fetching completed.") {
                    eventSource.close();
                    resetFetchUI();
                    alert('Emails fetched successfully!');
                }

                if (data.error) {
                    console.error(data.error);
                    alert(`Error: ${data.error}`);
                    eventSource.close();
                    resetFetchUI();
                    alert('An error occurred while fetching emails.');
                }
            } catch (error) {
                console.error('Error parsing data:', error);
            }
        };

        eventSource.onerror = function (e) {
            console.error('EventSource failed.', e);
            eventSource.close();
            resetFetchUI();
            alert('An error occurred while fetching emails.');
        };
    }

    function formatCurrentTimePlusSeconds(seconds) {
        const now = new Date();
        const etaDate = new Date(now.getTime() + (seconds * 1000));
        return etaDate.toLocaleTimeString('en-GB', { hour12: false });
    }

    async function generateApplicationChart() {
        const button = document.getElementById('generate-chart-button');
        const chartImage = document.getElementById('chart-image');
        const viewType = document.getElementById('view-type').value;

        button.disabled = true;
        button.style.backgroundColor = 'grey';

        try {
            const response = await fetch('/generate-application-chart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({viewType}),
            });

            if (!response.ok) {
                throw new Error('Failed to generate chart');
            }

            // Force browser to load new image by adding timestamp
            const timestamp = new Date().getTime();
            chartImage.src = `/applications_chart.png?t=${timestamp}`;
            chartImage.style.display = 'block';
        } catch (error) {
            console.error('Error generating chart:', error);
            alert('Error generating application chart');
        } finally {
            button.disabled = false;
            button.style.backgroundColor = '#0077b5';
        }
    }

    // Add this new function to handle UI updates
    function updateAuthUI(isAuthenticated) {
        const authContent = document.getElementById('auth-content');
        const fetchButton = document.getElementById('fetch-button');
        const generateChartButton = document.getElementById('generate-chart-button');

        if (isAuthenticated) {
            authContent.innerHTML = `
                <div class="auth-status">
                    <p style="color: green; margin-bottom: 10px;">
                        <i class="fas fa-check-circle"></i> Successfully authenticated with Gmail
                    </p>
                    <button onclick="handleLogout()" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                </div>
            `;
            
            if (fetchButton) {
                fetchButton.disabled = false;
                fetchButton.style.backgroundColor = '#0077b5';
                fetchButton.style.cursor = 'pointer';
            }
            if (generateChartButton) {
                generateChartButton.disabled = false;
                generateChartButton.style.backgroundColor = '#0077b5';
                generateChartButton.style.cursor = 'pointer';
            }
        } else {
            authContent.innerHTML = `
                <button id="auth-button" onclick="window.location.href='/auth/gmail'" class="auth-btn">
                    <i class="fab fa-google"></i>
                    Authenticate with Gmail
                </button>
            `;
            
            if (fetchButton) {
                fetchButton.disabled = true;
                fetchButton.style.backgroundColor = 'grey';
                fetchButton.style.cursor = 'not-allowed';
            }
            if (generateChartButton) {
                generateChartButton.disabled = true;
                generateChartButton.style.backgroundColor = 'grey';
                generateChartButton.style.cursor = 'not-allowed';
            }
        }
    }

    // Log the current URL to the console
    console.log('Current URL:', window.location.href);
    console.log('Current Path:', window.location.pathname);
</script>
</body>
</html>